// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Team          Team?     @relation(fields: [teamId], references: [id])
    teamId        String?
    Cards         Card[] // cards assigned to user 

    @@index([teamId])
}

model Team {
    id        String      @id @default(cuid())
    name      String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    members   User[]
    workspace Workspace[]
}

// workspace has one team and can have many boards (kanban)
model Workspace {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId    String
    boards    Board[]

    @@index([teamId])
}

// board has one workspace and can have many columns
model Board {
    id          String    @id @default(cuid())
    name        String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    columns     Column[]

    @@index([workspaceId])
}

// column has one board and can have many cards
model Column {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
    boardId   String
    cards     Card[]

    @@index([boardId])
}

// card has one column and can have many comments
model Card {
    id               String   @id @default(cuid())
    name             String
    description      String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    column           Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId         String
    //assigned to user maps to user name since username is unique
    assignedToUser   User?    @relation(fields: [assignedToUserId], references: [id])
    assignedToUserId String?

    @@index([columnId])
    @@index([assignedToUserId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
