// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String    @unique
    email         String?   @unique
    assignedTo    Card[]    @relation("AssignedToCards")
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    projects      Project[] @relation("ProjectMembers")
}

// assignee is a many-to-many relationship between users and cards name is related to USER name

// 
model Project {
    id          String       @id @default(cuid())
    name        String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    members     User[]       @relation("ProjectMembers")
    kanbanBoard KanbanBoard?
    schedule    Schedule?

    @@index([name, id])
}

// each project has a kanbanboard, its a one-to-one relationship and the kanbanboard is deleted when the project is deleted
model KanbanBoard {
    id        String   @id @default(cuid())
    projectId String   @unique
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    columns   Column[]
}

model Column {
    id            String      @id @default(cuid())
    name          String
    kanbanBoard   KanbanBoard @relation(fields: [kanbanBoardId], references: [id], onDelete: Cascade)
    kanbanBoardId String
    cards         Card[]

    @@index([id])
    @@index([kanbanBoardId])
}

model Card {
    id          String   @id @default(cuid())
    name        String?
    description String?
    labels      label[]
    assignees   User[]   @relation("AssignedToCards")
    column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([id])
    @@index([columnId])
}

model label {
    id    String @id @default(cuid())
    name  String
    color String @default("#000000")
    cards Card[]

    @@index([id])
}

model Schedule {
    id        String  @id @default(cuid())
    name      String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @unique

    @@index([id])
}

// board has one workspace and can have many columns

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
